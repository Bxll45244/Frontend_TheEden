// EmployeePage.jsx
import React, { useState, useMemo } from "react";
import { useOutletContext, useNavigate } from "react-router-dom";
// üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô EmployeeCard ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á Component ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Component ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á)
import EmployeeCard from "./EmployeeCard"; 

// üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Roles ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
const roles = ["All", "Admin", "Caddy", "Starter"]; 

export default function EmployeePage() {
    // ‚≠êÔ∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞ handlers ‡∏à‡∏≤‡∏Å AdminDashboard (Outlet Context)
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• employees ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤ ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å normalize role ‡πÅ‡∏•‡πâ‡∏ß
    const { employees, loading } = useOutletContext(); 
    const navigate = useNavigate();

    const [searchTerm, setSearchTerm] = useState("");
    const [activeTab, setActiveTab] = useState("All"); 
    
    // üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏≠‡∏á Roles ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô (‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
    const roleCounts = useMemo(() => {
        // ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô All ‡∏î‡πâ‡∏ß‡∏¢ employees.length ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const counts = { All: employees.length }; 
        
        employees.forEach(emp => {
            // emp.role ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å normalize ‡πÄ‡∏õ‡πá‡∏ô 'Admin', 'Caddy' ‡∏Ø‡∏•‡∏Ø ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å AdminDashboard
            // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà normalize ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö
            const role = emp.role || 'N/A'; 
            
            // ‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Role ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô List (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö Role ‡πÉ‡∏´‡∏°‡πà‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
            if (roles.includes(role)) { 
                counts[role] = (counts[role] || 0) + 1;
            } else if (role !== 'N/A') {
                // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Role ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'Admin', 'Caddy', 'Starter' ‡∏Å‡πá‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏ß‡∏°‡πÉ‡∏ô 'All' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Role ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô List 'roles' ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
            }
        });
        
        // **‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö**: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Role ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô 'roles' ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Role ‡∏ô‡∏±‡πâ‡∏ô‡πÜ
        roles.slice(1).forEach(role => {
            if (counts[role] === undefined) {
                counts[role] = 0;
            }
        });
        
        return counts;
    }, [employees]);

    // üí° Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û)
    const filteredEmployees = useMemo(() => {
        if (!employees) return [];
        return employees.filter(emp => {
            // emp.role ‡∏ñ‡∏π‡∏Å normalize ‡∏°‡∏≤‡∏à‡∏≤‡∏Å AdminDashboard ‡πÅ‡∏•‡πâ‡∏ß
            const normalizedRole = emp.role || 'N/A'; 
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Tab ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const matchesTab = activeTab === "All" || normalizedRole === activeTab;
            
            // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Search Term (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö name ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á .toLowerCase())
            const matchesSearch = (emp.name || "").toLowerCase().includes(searchTerm.toLowerCase());
            
            return matchesTab && matchesSearch;
        });
    }, [employees, searchTerm, activeTab]);

    // üí° Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å Card
    const handleEmployeeClick = (employee) => {
        navigate(`/admin/detail/${employee._id}`); 
    };

    if (loading) {
        return <div className="text-center p-8 text-xl text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...</div>;
    }
    
    // ‚≠êÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Tab Navigation (‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î RoleTabs ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ)
    const renderRoleTabs = () => {
        const getTabClasses = (role) => 
            `px-4 py-2 font-semibold cursor-pointer transition-all duration-200 
            ${activeTab === role 
                ? 'border-b-4 border-green-500 text-green-700 bg-green-50' 
                : 'text-gray-600 hover:text-green-500 hover:bg-gray-50'}`;
        
        return (
            <div className="flex justify-start border-b border-gray-200 mb-6 overflow-x-auto">
                {/* ‡πÉ‡∏ä‡πâ roles list ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ render tab ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á */}
                {roles.map((role) => (
                    <div 
                        key={role}
                        className={getTabClasses(role)}
                        onClick={() => setActiveTab(role)}
                    >
                        {role}
                        <span className="ml-2 px-2 py-0.5 text-xs rounded-full bg-gray-200 text-gray-700">
                            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ */}
                            {roleCounts[role] || 0} 
                        </span>
                    </div>
                ))}
            </div>
        );
    };

    // üí° ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const renderNoData = () => (
        <div className="text-center text-gray-500 p-10 border border-dashed rounded-xl mt-6">
            <p className="text-xl font-medium">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç</p>
            <p className="text-sm mt-1">‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á</p>
        </div>
    );


    return (
        <div className="p-4 bg-white rounded-xl shadow-lg">
            
            {/* ‚≠êÔ∏è 1. Search Input Header ‚≠êÔ∏è */}
            <div className="mb-6 flex justify-between items-center flex-wrap">
                <div className="flex-grow">
                    {/* ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° Title ‡πÄ‡∏ä‡πà‡∏ô <h1 className="text-2xl font-bold">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h1> ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ */}
                </div>

                {/* ‚≠êÔ∏è ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ‚≠êÔ∏è */}
                <div className="relative mt-2 sm:mt-0">
                    <input 
                        type="text"
                        placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô..."
                        className="p-2 border rounded-lg w-full sm:w-64 pl-10 focus:ring-green-500 focus:border-green-500" 
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    {/* Icon ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
                    <svg
                        className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        width="20"
                        height="20"
                    >
                        <circle cx="11" cy="11" r="8" />
                        <path d="m21 21-4.3-4.3" />
                    </svg>
                </div>
            </div>
            
            {/* 2. ‡πÅ‡∏ó‡∏ö Tabs */}
            {renderRoleTabs()}
            
            {/* 3. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
            <div className="mt-6">
                 {filteredEmployees.length === 0 ? (
                    renderNoData()
                 ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                        {filteredEmployees.map((emp) => (
                            <EmployeeCard
                                key={emp._id || emp.id} 
                                employee={emp}
                                onClick={() => handleEmployeeClick(emp)}
                            />
                        ))}
                    </div>
                 )}
            </div>
        </div>
    );
}